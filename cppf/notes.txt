Notes for the C++ Foundation course

Guidelines for this course:
- assume that students have done the "C Foundation" course about 6 months ago
- apart from that, the course must be complete, self contained, refers to TC++PL, 3ed
- for now assume C++98 by default, occationally mention C and C++0x
- when C++0x is ready and gcc can support it, course should be rewritten into using C++0x
- students will/should have a copy of TC++PL, 3ed

Agenda:

Day 1:
0900 Introduction
0930 Exercise / break
0945 A Brief Tour of C++
1030 Functions, Operators & Data Structures
1130 Exercise / lunch
1300 Objects, Classes and Lifetimes
1400 Control Flow and Exceptions
1500 Exercise/Homework (Recently used list)
1600 End of day

Day 2:
0900 Excercise/Homework...
0915 Program Organization and Dependency Management
1015 Standard Libraries
1100 Exercise / lunch
1300 Object Oriented Programming in C++
1500 Break
1515 Summary
1600 End of course

Outline:

* 01 Introduction to C++ (30 min)

- example: undefined behaviour, evaluation order, sequence points
- reasons for using C++
- usage of C++
- do not compare C++ with C, rather C++ with eg Java
- bweare multi-paradigm
- the spirit of C++
- Hello C++

* Ex1 - Hello World (15 min incl coffee break)

- edit, compile, link C++ code
- just an enviornment check

* 02 A Brief Tour of C++ (30 min)

- start with sunny story, accelerated C++ style
- don't initally worry about const & eg
- use tests with, not iostream

* 03 Functions, Operators & Data Structures (60 min)

- overloading
- default arguments
- references, pass by copy vs pass by ref
- template functions

* Ex2 - Date or Phonebook (90 min incl lunch)

- use structure, functions working on structure through pointer (the C way)
- operators
- templated functions
- test driven development

* 04 Objects, Classes and Lifetimes

- drive class design from object usage (ala TDD)
- ctor, dtor
- use cerr for debug/diag output
- 3 storage classes
- be opinionated about stack usage and bold pointers
- copy constructor and and assignment operator
- smart pointers

* 05 Control Flow, Iterators and Exceptions (60 min)

- exceptions - lifetime, use of predefined, handle & throw
- use of predefined iterators (for_each, copy, etc)

* Ex3 - Recently Used List (120 min incl homework)

- use iterators, use control flow
- discover patterns, language constructs, standard library 

* 06 Program Organization and Dependency Management

- koenig / ADL
- makefile and compiler flags
- header files and source files (header guards)
- namespace, "packages", using directives
- fwd declarations
- dependency injections

* 07 Standard Libraries

- examples of usage from:
  - containers and iterators
  - algorithmes
  - string, iostream, stringstream
  - pair
  - functional
  - the C library
  - mention boost, tr1 and C++0x

* Ex4 - Poker Hands (120 min incl lunch)

- free form
- pairs/teams describe their solutions to everyone
- avoid quiz, give strong hints about how to solve it
- perhaps a C implementation with tests, and ask to refactor?

08 Object Oriented Programming in C++ (120 min)

- encapsualation, abstractions
- separation of concerns
- LSP, PFA, SRP, patterns

09 Summary (45)

- quick recap of everything


Attic:
- pointers, references, arrays
- namespaces, exceptions, 
- brefly about templates
- class hierarchies
- sufficient STL
- sufficient OO
- memory management (new vs malloc, placement new, ctor/dtors)
- dependency management, header organization
- iostream
- strings
- iterators, containers, algorithms, function objects
- C++ culture and efficiency
- Agenda:
Functions and Operators (overloading, def arg, inlining, references, operators, func templates)
exercise (operator exercise, date)
Object Lifetimes (memory mgmt, using, smartptrs, stack based programming

C++ Object Oriented Programming
- patterns
- OO principles
 - encapsulation
 - abstraction
 - separation of concerns
 - single responsibility principle
 - liskov's substitution principle, general substitution
 - parameterize from above
- abstraction with efficiency
- inheritance, mechanics and techniques
- object life-times (smart pointers, stack based programming)
- value objects (operator overloading, conversions)
- containers
- encapsulation practices

<ul>
<i>
If C gives you enough rope to hang yourself, C++ is a hardware 
store with lots of helpful people ready to tie knots for you.
</i>
</ul>

